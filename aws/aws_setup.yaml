AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  A AWS Lambda function that is triggered either by an upload event for a designated S3
  bucket or by a timer event (cron).
Parameters:
  CommonPrefix:
    Description: Common prefix for all named resources
    Type: String
  BucketName:
    Description: S3 Bucket name
    Type: String
  CodeBucketName:
    Description: S3 Bucket where to find the zip file with the lambda code
    Type: String
    Default: "ktsr42.s3.code"
  CodeZipName:
    Description: Filename (S3 'key') where the zipfile with the lambda code has been placed.
    Type: String
    Default: code/process_temp_readings.zip
Resources:
  bucket:
    Type: AWS::S3::Bucket
    DependsOn: BucketPermission
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Filter:
            S3Key:
              Rules:
                - Name: prefix
                  Value: observations
          Function: !GetAtt BucketWatcher.Arn
  BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref BucketWatcher
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${BucketName}"
  BucketWatcher:
    Type: AWS::Lambda::Function
    Properties:
      Description: Processes the newly received temperature reading(s) and sends a SMS alert if necessary.
      Handler: process_temp_readings.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: !Sub "${CommonPrefix}_heating_lambda"
      Runtime: python3.6
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref CodeZipName
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          CONFIG_BUCKET: !Ref BucketName
  StatusCheckEvent:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${CommonPrefix}_heating_check"
      ScheduleExpression: rate(4 hours)
      Targets:
        -
          Arn:
            !GetAtt BucketWatcher.Arn
          Id: HeatingScheduledEvent
  StatusCheckPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BucketWatcher
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StatusCheckEvent.Arn
  PublishingUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub "${CommonPrefix}_heating_publisher"
      Policies:
      - PolicyName: S3PublishingPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject'
              Resource: "arn:aws:s3:::*"      
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CommonPrefix}.heating.lambda_role.heating"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
      - PolicyName: S3Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:GetObject'
                - 's3:PutObject'
              Resource: "arn:aws:s3:::*"
      - PolicyName: SNSPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'sns:Publish'
              Resource: "*"
